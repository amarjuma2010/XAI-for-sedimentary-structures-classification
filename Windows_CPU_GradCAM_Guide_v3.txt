Windows CPU Inference + Grad-CAM (EfficientNet-B2, ResNet-50, MobileNet-V3)
==============================================================================

This guide reproduces your successful setup and runs on Windows + CPU with Python 3.12 and Grad-CAM++, using your folders:

- Blind test images: C:\Users\Hp\Desktop\Multi-model XAI\Blind test images
- Script:           C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py
- Models (5-fold training; choose a fold by its .pth path):
    - efficientnet_b2_fold1.pth ... efficientnet_b2_fold5.pth
    - resnet50_fold1.pth       ... resnet50_fold5.pth
    - mobilenet_v3_fold1.pth   ... mobilenet_v3_fold5.pth
- Outputs:          C:\Users\Hp\Desktop\Multi-model XAI\Outputs

The v3 script:
- uses your exact 11 classes (no need to pass --classes)
- does NOT resize your images (as requested)
- draws Grad-CAM++ overlays and saves per-model CSVs
- allows you to choose **which fold** to run by changing the checkpoint path(s)


1) One-time environment setup
-----------------------------

1.1 Install Python 3.12 (already done)
You installed 3.12.7 and kept 3.13 as system default — that’s fine.

1.2 Create & activate a 3.12 virtual environment (PowerShell):
    cd "C:\Users\Hp\Desktop\Multi-model XAI\Scripts"
    py -3.12 -m venv .venv312

If activation is blocked (execution policy), use a temporary bypass:
    Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
    .\.venv312\Scripts\Activate.ps1

Prompt should change to: (.venv312)

1.3 Install packages (CPU builds + Grad-CAM):
    python -m pip install --upgrade pip setuptools wheel
    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
    pip install --no-cache-dir git+https://github.com/jacobgil/pytorch-grad-cam@master
    pip install albumentations opencv-python matplotlib pandas scipy pillow

Verify:
    python -c "import torch, pytorch_grad_cam; print('Torch:', torch.__version__); print('Grad-CAM OK')"


2) Script overview (v3)
-----------------------

multi_model_inference_windows_cpu_v3.py key behavior:
- Classes (fixed 11, exact order):
  1. Conglomerate
  2. Cross bedding
  3. Lenticular bedding
  4. Low-angle bedding
  5. Wavy bedding
  6. Bioturbated muddy media
  7. Bioturbated sandy media
  8. Massive mudstone
  9. Massive sandstone
  10. mud drape
  11. Parallel lamination
- No resizing: runs on the original image size
- Grad-CAM++ per model, saved as side-by-side Original | Heatmap images
- CSV per model with columns: filename, prediction, prob, runtime_ms
- Auto-detects the number of classes from checkpoints; reconciles with your labels
- **Fold selection**: You can run any of the 5 folds for each model by changing the checkpoint path (see §3.4).

Default paths inside the script match your folders, so you can run with no flags if you want all three models (defaulting to fold1 for each).


3) How to run
-------------

3.1 Run all three models (default):
    python "C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py"

You’ll see sections in order:
    ▶ efficientnet_b2: ...
    ▶ resnet50: ...
    ▶ mobilenet_v3: ...

Tip: This can be slow on CPU (no resizing). Don’t type in the terminal while it runs.

3.2 Run exactly the two commands you confirmed working:
- EfficientNet + ResNet only (skip MobileNet):
    python "C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py" --mob_ckpt "SKIP"

- MobileNet only (skip EfficientNet & ResNet):
    python "C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py" --eff_ckpt "SKIP" --res_ckpt "SKIP"

“SKIP” is any non-existent path; the script checks os.path.exists(...) and quietly skips that model.

3.3 ResNet-50 only:
- Minimal (skip EfficientNet & MobileNet):
    python "C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py" --eff_ckpt "SKIP" --mob_ckpt "SKIP"

- Explicit (set your ResNet checkpoint path):
    python "C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py" --res_ckpt "C:\Users\Hp\Desktop\Multi-model XAI\Results\kfold_training_outputs\resnet50_fold1.pth" --eff_ckpt "SKIP" --mob_ckpt "SKIP"

3.4 Choose a specific **fold** (you have 5 folds per model)
You can switch from fold to fold by changing the checkpoint file in the **model path** arguments. For example:

- EfficientNet-B2 fold **2** (and run it alone):
    python "C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py" --eff_ckpt "C:\Users\Hp\Desktop\Multi-model XAI\Results\kfold_training_outputs\efficientnet_b2_fold2.pth" --res_ckpt "SKIP" --mob_ckpt "SKIP"

- ResNet-50 fold **3** (alone):
    python "C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py" --res_ckpt "C:\Users\Hp\Desktop\Multi-model XAI\Results\kfold_training_outputs\resnet50_fold3.pth" --eff_ckpt "SKIP" --mob_ckpt "SKIP"

- MobileNet-V3 fold **5** (alone):
    python "C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py" --mob_ckpt "C:\Users\Hp\Desktop\Multi-model XAI\Results\kfold_training_outputs\mobilenet_v3_fold5.pth" --eff_ckpt "SKIP" --res_ckpt "SKIP"

- Run **all three** but with custom folds (e.g., eff fold2, res fold4, mob fold5):
    python "C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py" ^
      --eff_ckpt "C:\Users\Hp\Desktop\Multi-model XAI\Results\kfold_training_outputs\efficientnet_b2_fold2.pth" ^
      --res_ckpt "C:\Users\Hp\Desktop\Multi-model XAI\Results\kfold_training_outputs\resnet50_fold4.pth" ^
      --mob_ckpt "C:\Users\Hp\Desktop\Multi-model XAI\Results\kfold_training_outputs\mobilenet_v3_fold5.pth"

(If you split across lines in PowerShell, use the backtick ` instead of caret ^, and ensure the backtick is the final character of the line.)

Note: Make sure the fold checkpoints correspond to the same label order as the script’s 11 classes. The script auto-detects `num_classes` from the checkpoint and will reconcile counts, but label **order** should match what the model was trained on.


4) Outputs
----------

Saved to:
    C:\Users\Hp\Desktop\Multi-model XAI\Outputs

4.1 Images (per model)
- Filenames: <original_stem>_<model>.jpg
  Examples:
    CongBT5_resnet50.jpg
    CongBT5_efficientnet_b2.jpg
    CongBT5_mobilenet_v3.jpg
- Each image shows Original and Grad-CAM++ heatmap with the predicted class as the title.

4.2 CSVs (per model)
- preds_efficientnet_b2.csv
- preds_resnet50.csv
- preds_mobilenet_v3.csv

Columns:
- filename: the input image name
- prediction: your geological class name
- prob: predicted confidence (0–1)
- runtime_ms: per-image inference time on CPU


5) Performance notes (CPU + no resize)
--------------------------------------

- No resizing means the model processes full-resolution images. That’s accurate but slow on CPU.
- To speed up while still saving heatmaps on the original size, you can add an optional inference-size in a future script update:
  (a) run the network at a smaller working size (e.g., 512), and
  (b) upsample the CAM before overlaying on the original.


6) PowerShell tips
------------------

- Backtick continuation: in PowerShell, the backtick (`) must be the last character on the line (no trailing spaces).
- If a command errors with “expected one argument”, put it on one line or fix the line continuations.
- Avoid random keystrokes while a long job is running — they can interrupt and start new commands.


7) Troubleshooting (what we hit & the fixes)
--------------------------------------------

Symptom: Could not find a version that satisfies pytorch-grad-cam
Cause:   PyPI resolver + Python version / index URL
Fix:     pip install --no-cache-dir git+https://github.com/jacobgil/pytorch-grad-cam@master

Symptom: unicodeescape in script
Cause:   Python docstring contained Windows paths like \U...
Fix:     Use raw triple quotes r\"\"\"...\"\"\" or use the v3 script

Symptom: EfficientNet size-mismatch (fc.weight shape)
Cause:   Classes passed incorrectly (treated a file path as one class)
Fix:     v2/v3 auto-detect class count from checkpoint and reconcile names

Symptom: MobileNet size-mismatch (classifier.0 vs final)
Cause:   Picked the wrong classifier layer from checkpoint
Fix:     v3 prioritizes final head keys (e.g., fc.weight, classifier.3.weight)

Symptom: Only EfficientNet seemed to run
Cause:   CPU + no resize is slow; later models hadn’t started/finished, or terminal input interrupted
Fix:     Let it run to completion, or run models separately using the SKIP trick above


8) Repro checklist (quick)
--------------------------
1) Activate env:
   Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
   .\.venv312\Scripts\Activate.ps1

2) Verify Grad-CAM installed:
   python -c "import torch,pytorch_grad_cam;print('OK')"

3) Run all three (defaults to fold1 for each):
   python "C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py"

4) Or run specific folds via checkpoint paths:
   - EfficientNet fold2 only:
     python "C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py" --eff_ckpt "C:\Users\Hp\Desktop\Multi-model XAI\Results\kfold_training_outputs\efficientnet_b2_fold2.pth" --res_ckpt "SKIP" --mob_ckpt "SKIP"
   - ResNet fold3 only:
     python "C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py" --res_ckpt "C:\Users\Hp\Desktop\Multi-model XAI\Results\kfold_training_outputs\resnet50_fold3.pth" --eff_ckpt "SKIP" --mob_ckpt "SKIP"
   - MobileNet fold5 only:
     python "C:\Users\Hp\Desktop\Multi-model XAI\Scripts\multi_model_inference_windows_cpu_v3.py" --mob_ckpt "C:\Users\Hp\Desktop\Multi-model XAI\Results\kfold_training_outputs\mobilenet_v3_fold5.pth" --eff_ckpt "SKIP" --res_ckpt "SKIP"
